Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Import Flask so that we can create an app instance\r\nimport sqlite3\r\nfrom flask import Flask, request, url_for, render_template, flash\r\nfrom flask import g\r\nimport jwt   # PyJWT\r\nimport uuid\r\nimport requests\r\nimport websocket\r\nimport json\r\nfrom flask_socketio import SocketIO, send, emit\r\nfrom eventlet import wsgi\r\nimport eventlet\r\nfrom upbitpy import Upbitpy\r\nimport logging\r\n\r\nDATABASE = 'deomps5.db'\r\n# UpbitPy init\r\nkrw_markets = []\r\ndef print_tickers(items):\r\n    for it in items:\r\n        logging.info('{}: {} won'.format(it['market'], it['trade_price']))\r\n\r\napp = Flask(__name__)\r\napp.config.from_object(__name__)\r\nsocketio = SocketIO(app)\r\n\r\n#UPBIT ACCESS\r\n#Access Key : dqZ29pX3nfA8KyxmiYyRt9UwzBOW4a8TwRs34Er7\r\n#Secret Key : V6Hd527RnXmqsEbq1qP6sMBpxw0po7zjbBwHr9L4\r\n\r\npayload = {\r\n    'access_key': 'dqZ29pX3nfA8KyxmiYyRt9UwzBOW4a8TwRs34Er7',\r\n    'nonce': str(uuid.uuid4()),\r\n}\r\njwt_token = jwt.encode(payload, 'V6Hd527RnXmqsEbq1qP6sMBpxw0po7zjbBwHr9L4')\r\nauthorization_token = 'Bearer {}'.format(jwt_token)\r\n\r\n## For Upbit Realtime Price check\r\ntry:\r\n    import thread\r\nexcept ImportError:\r\n    import _thread as thread\r\nimport time\r\n\r\n\r\ndef on_message(ws, message):\r\n    get_message = json.loads(message)\r\n    print(get_message[\"code\"],'\\'s Real Time Price: ', get_message[\"trade_price\"])\r\n    handle_json(get_message);\r\n\r\ndef on_error(ws, error):\r\n    print(error)\r\n\r\ndef on_close(ws):\r\n    print(\"close\")\r\n\r\ndef on_open(ws):\r\n    def run():\r\n        sendData = '[{\"ticket\":\"test\"},{\"type\":\"ticker\",\"codes\":['\r\n        for market in krw_markets:\r\n            sendData += '\"' + market + '\"'\r\n            if krw_markets.index(market) != len(krw_markets)-1:\r\n                sendData += ','\r\n        sendData += '],\"isOnlySnapshot\":true}]'\r\n        ws.send(sendData)\r\n    time.sleep(10)\r\n    thread.start_new_thread(on_open, (ws))\r\n\r\n# All Flask app must create an app instance like this with the name of\r\n# the main module:\r\n\r\n\r\n# DB connection\r\ndef get_db():\r\n    db = getattr(g, '_database', None)\r\n    if db is None:\r\n        db = g._database = sqlite3.connect(DATABASE)\r\n    return db\r\n@app.teardown_appcontext\r\ndef close_connection(exception):\r\n    db = getattr(g, '_database', None)\r\n    if db is not None:\r\n        db.close()\r\n\r\n# query function\r\ndef query_db(query, args=(), one=False):\r\n    cur = get_db().execute(query, args)\r\n    rv = cur.fetchall()\r\n    print(rv)\r\n  #  tnames = []\r\n  #  if len(rv) is not 0:\r\n      #  for t in cur.description:\r\n      #      tnames.append(t[0])\r\n      #  rv.insert(0, tnames)\r\n    cur.close()\r\n    return (rv[0] if rv else None) if one else rv\r\n\r\ndef realtime_connect():\r\n    \"\"\"  ws = websocket.WebSocketApp(\"wss://api.upbit.com/websocket/v1\",\r\n                                on_message=on_message,\r\n                                on_error=on_error,\r\n                                on_close=on_close)\r\n    ws.on_open = on_open\r\n    thread.start_new_thread(ws.run_forever, ())\r\n    \"\"\"\r\n    url = \"https://api.upbit.com/v1/ticker\"\r\n    markets = \"\"\r\n    for market in krw_markets:\r\n        markets += market\r\n        if krw_markets.index(market) != len(krw_markets) - 1:\r\n            markets += ','\r\n    querystring = {\"markets\": markets}\r\n    headers = {\"Accept\": \"application/json\"}\r\n    response = requests.request(\"GET\", url, headers=headers, params=querystring)\r\n    for market in response.json():\r\n        print(market[\"market\"],'\\'s Real Time Price: ', market[\"trade_price\"])\r\n    time.sleep(10)\r\n    thread.start_new_thread(realtime_connect, ())\r\n\r\n# Invoke this one with http://127.0.0.1:5000\r\n@app.route('/')\r\ndef index():\r\n    upbit = Upbitpy()\r\n    markets = upbit.get_market_all()\r\n    for market in markets:\r\n        if 'KRW-' in market['market']:\r\n            krw_markets.append(market['market'])\r\n    realtime_connect()\r\n#    headers = {\"Authorization\": authorization_token}\r\n#    res = requests.get('https://api.upbit.com/v1/ticker?markets=KRW-ETH', headers=headers).json()\r\n#    print(res)\r\n    return render_template('base.html')\r\n\r\n# Flask SocketIO handler\r\n@socketio.on('my event')\r\ndef handle_my_custom_event(json):\r\n    print('received json: ' + str(json))\r\n\r\n@socketio.on('json')\r\ndef handle_json(json):\r\n    emit(json, json=True)\r\n\r\n@socketio.on('message')\r\ndef handle_message(message):\r\n    emit('json',message)\r\n\r\n# Now, run the app as a server in debug mode or public mode\r\nif __name__ == '__main__':\r\n    wsgi.server(eventlet.listen(('127.0.0.1', 5000)), app)\r\n    socketio.run(app)\r\n  #  app.run(debug=True)        # Debug mode will reload files when changed.\r\n    # app.run(host='0.0.0.0')  # To make the server listen on all public IPs.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision fd988f94b98212735c115f2360cb4b647b3ae48b)
+++ b/main.py	(date 1621783120122)
@@ -1,5 +1,7 @@
 # Import Flask so that we can create an app instance
 import sqlite3
+import threading
+
 from flask import Flask, request, url_for, render_template, flash
 from flask import g
 import jwt   # PyJWT
@@ -23,7 +25,6 @@
 app = Flask(__name__)
 app.config.from_object(__name__)
 socketio = SocketIO(app)
-
 #UPBIT ACCESS
 #Access Key : dqZ29pX3nfA8KyxmiYyRt9UwzBOW4a8TwRs34Er7
 #Secret Key : V6Hd527RnXmqsEbq1qP6sMBpxw0po7zjbBwHr9L4
@@ -42,7 +43,7 @@
     import _thread as thread
 import time
 
-
+"""
 def on_message(ws, message):
     get_message = json.loads(message)
     print(get_message["code"],'\'s Real Time Price: ', get_message["trade_price"])
@@ -68,7 +69,7 @@
 
 # All Flask app must create an app instance like this with the name of
 # the main module:
-
+"""
 
 # DB connection
 def get_db():
@@ -112,41 +113,60 @@
     querystring = {"markets": markets}
     headers = {"Accept": "application/json"}
     response = requests.request("GET", url, headers=headers, params=querystring)
+    toClient = {}
     for market in response.json():
         print(market["market"],'\'s Real Time Price: ', market["trade_price"])
-    time.sleep(10)
-    thread.start_new_thread(realtime_connect, ())
+        toClient[market["market"]] = market["trade_price"]
+    return toClient
+   # handle_json(toClient,sid);
+   # print("json request delivered.")
+   # time.sleep(5)
+   # thread.start_new_thread(realtime_connect, (sid,))
 
 # Invoke this one with http://127.0.0.1:5000
 @app.route('/')
 def index():
+    return render_template('base.html')
+
+# Flask SocketIO handler
+
+@socketio.on('my event')
+def handle_my_custom_event(sid):
+    print('received json: ' + str(sid))
+    #socketio.emit('json', realtime_connect())
+    socketio.emit('json', realtime_connect(), to=sid)
+@socketio.on('create table')
+def emitJson(sid):
+    socketio.emit('create table', realtime_connect(), to=sid)
+
+@socketio.on('update')
+def update(json):
+    socketio.emit('update', json, broadcast=True)
+
+
+class ThreadCount(object):
+    def __init__(self):
+        self = []
+    def append(self, thread):
+        self = [thread]
+    def getCount(self):
+        return len(self)
+    def join(self):
+        self[0].join();
+"""
+@socketio.on('realtime')
+def realtime_data(json, methods=['GET', 'POST']):
+    socketio.send('realtime', json)
+"""
+# Now, run the app as a server in debug mode or public mode
+if __name__ == '__main__':
     upbit = Upbitpy()
     markets = upbit.get_market_all()
     for market in markets:
         if 'KRW-' in market['market']:
             krw_markets.append(market['market'])
-    realtime_connect()
-#    headers = {"Authorization": authorization_token}
-#    res = requests.get('https://api.upbit.com/v1/ticker?markets=KRW-ETH', headers=headers).json()
-#    print(res)
-    return render_template('base.html')
-
-# Flask SocketIO handler
-@socketio.on('my event')
-def handle_my_custom_event(json):
-    print('received json: ' + str(json))
-
-@socketio.on('json')
-def handle_json(json):
-    emit(json, json=True)
-
-@socketio.on('message')
-def handle_message(message):
-    emit('json',message)
-
-# Now, run the app as a server in debug mode or public mode
-if __name__ == '__main__':
-    wsgi.server(eventlet.listen(('127.0.0.1', 5000)), app)
-    socketio.run(app)
+    #wsgi.server(eventlet.listen(('127.0.0.1', 5000)), app)
+    Tcount = ThreadCount()
+    socketio.run(app, debug=True)
   #  app.run(debug=True)        # Debug mode will reload files when changed.
     # app.run(host='0.0.0.0')  # To make the server listen on all public IPs.
Index: templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    {% block head %}\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js\" integrity=\"sha512-q/dWJ3kcmjBLU4Qc47E4A9kTB4m3wuTY7vkFJDTZKjTs8jhyGQnaUrxa0Ytd0ssMZhbNua9hE+E7Qv1j+DyZwA==\" crossorigin=\"anonymous\"></script>\r\n    <script type=\"text/javascript\" charset=\"utf-8\">\r\n    var socket = io();\r\n    socket.on('connect', function() {\r\n        socket.emit('my event', {data: 'I\\'m connected!'});\r\n    });\r\n    socket.on('json', function(data) {\r\n        socket.emit('my event', {data: data});\r\n    });\r\n    </script>\r\n    {% endblock %}\r\n</head>\r\n<style>\r\n    body{\r\n        text-align: center;\r\n    }\r\n    .menu{\r\n        margin-left: 5%;\r\n    }\r\n</style>\r\n<body>\r\n{% block body %}\r\n<div style=\"text-align: center; margin: auto; height: 50px\">\r\n    <a class='menu' href=\"/q1\">Find a PC with Price</a>\r\n    <a class='menu' href=\"/q2\">Find a Laptop with Specs</a>\r\n    <a class='menu' href=\"/q3\">Find products of the manufacturer</a>\r\n</div>    \r\n<div style=\"text-align: center; margin: auto;\">\r\n    <a class='menu' href=\"/q4\">Find a PC and a Printer with your budget</a>\r\n    <a class='menu' href=\"/q5\">Add a brand new PC to the database</a>\r\n    </div>\r\n{% endblock %}\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base.html b/templates/base.html
--- a/templates/base.html	(revision fd988f94b98212735c115f2360cb4b647b3ae48b)
+++ b/templates/base.html	(date 1621783429035)
@@ -3,16 +3,32 @@
 <head>
     {% block head %}
     <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js" integrity="sha512-q/dWJ3kcmjBLU4Qc47E4A9kTB4m3wuTY7vkFJDTZKjTs8jhyGQnaUrxa0Ytd0ssMZhbNua9hE+E7Qv1j+DyZwA==" crossorigin="anonymous"></script>
+    {% endblock %}
     <script type="text/javascript" charset="utf-8">
     var socket = io();
     socket.on('connect', function() {
-        socket.emit('my event', {data: 'I\'m connected!'});
+       console.log(socket.id)
+       socket.emit('create table', data=socket.id );
+       setInterval(function(){ socket.emit('my event', data=socket.id ); }, 5000);
     });
+    socket.on('create table', function(data){
+        for (const [key, value] of Object.entries(data)) {
+         var tag = document.createElement("p");
+         tag.setAttribute('id', key);
+         var text = document.createTextNode(key+": "+value);
+        tag.appendChild(text);
+        var element = document.getElementById("coins");
+        element.appendChild(tag);
+        }
+    });
+
     socket.on('json', function(data) {
-        socket.emit('my event', {data: data});
+       for (const [key, value] of Object.entries(data)) {
+        var element = document.getElementById(key);
+        document.getElementById(key).innerHTML = key + ": " + value;
+       }
     });
     </script>
-    {% endblock %}
 </head>
 <style>
     body{
@@ -32,7 +48,10 @@
 <div style="text-align: center; margin: auto;">
     <a class='menu' href="/q4">Find a PC and a Printer with your budget</a>
     <a class='menu' href="/q5">Add a brand new PC to the database</a>
-    </div>
+</div>
 {% endblock %}
+<div id="coins">
+    <p> Coin List : </p>
+</div>
 </body>
 </html>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4f9d74bc-890c-46aa-8db3-414ce95b31c8\" name=\"Default Changelist\" comment=\"WebSocket Libraries, Upbit Real time price snapshot test\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1shM7AXAfSefyyfYCYRMBeVngUk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../deomps5\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\DUKYOUNG\\PycharmProjects\\CSE305_Final_Project\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"CSE305_Final_Project\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4f9d74bc-890c-46aa-8db3-414ce95b31c8\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1621320198336</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1621320198336</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\r\n      <created>1621320707750</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621320707750</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"flask libraries installed\">\r\n      <created>1621321043128</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621321043128</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"test html\">\r\n      <created>1621321393183</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621321393183</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"UPBIT Access Test\">\r\n      <created>1621322755483</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621322755483</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"DB Create file added (specification needs to be changed)\">\r\n      <created>1621322914561</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621322914561</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"WebSocket Libraries, Upbit Real time price snapshot test\">\r\n      <created>1621507411525</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621507411526</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"WebSocket Libraries, Upbit Real time price snapshot test\">\r\n      <created>1621507524516</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1621507524516</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"flask libraries installed\" />\r\n    <MESSAGE value=\"test html\" />\r\n    <MESSAGE value=\"UPBIT Access Test\" />\r\n    <MESSAGE value=\"DB Create file added (specification needs to be changed)\" />\r\n    <MESSAGE value=\"WebSocket Libraries, Upbit Real time price snapshot test\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"WebSocket Libraries, Upbit Real time price snapshot test\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fd988f94b98212735c115f2360cb4b647b3ae48b)
+++ b/.idea/workspace.xml	(date 1621515346345)
@@ -1,9 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="4f9d74bc-890c-46aa-8db3-414ce95b31c8" name="Default Changelist" comment="WebSocket Libraries, Upbit Real time price snapshot test">
+    <list default="true" id="4f9d74bc-890c-46aa-8db3-414ce95b31c8" name="Default Changelist" comment="Real time price check">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/base.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/base.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -110,7 +111,14 @@
       <option name="project" value="LOCAL" />
       <updated>1621507524516</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="Real time price check">
+      <created>1621514836499</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1621514836499</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -132,6 +140,7 @@
     <MESSAGE value="UPBIT Access Test" />
     <MESSAGE value="DB Create file added (specification needs to be changed)" />
     <MESSAGE value="WebSocket Libraries, Upbit Real time price snapshot test" />
-    <option name="LAST_COMMIT_MESSAGE" value="WebSocket Libraries, Upbit Real time price snapshot test" />
+    <MESSAGE value="Real time price check" />
+    <option name="LAST_COMMIT_MESSAGE" value="Real time price check" />
   </component>
 </project>
\ No newline at end of file
